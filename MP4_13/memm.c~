/* mem.c A template
 *
 * Lab4: Dynamic Memory Allocation
 * Version: 1
 * ECE 223, Fall 2013
 */

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <unistd.h>
#include"mem.h"
/* an example of a chunk_t definition.  You must modify this to
 * match your design
 */
typedef struct chunk_tag {
    struct chunk_tag *next;
    int size;
} chunk_t;

// Global variables required in mem.c only
static chunk_t * Rover = NULL;
static int pagerequest=0;
static int sbrk_call = 0;

//static int num_call=0;

#define PAGESIZE 4096

/* function to request 1 or more pages from the operating system.
 *
 * The function must not be changed.
 */
chunk_t *morecore(int new_bytes) 
{
    char *cp;
    chunk_t *new_p;
    assert(new_bytes % PAGESIZE == 0);
    cp = sbrk(new_bytes);
    
    if (cp == (char *) -1)  /* no space available */
	    return NULL;
    new_p = (chunk_t *) cp;
    return new_p;
}

/* deallocates the space pointed to by return_ptr; it does nothing if
 * return_ptr is NULL.  
 *
 * This function assumes that the Rover pointer has already been 
 * initialized and points to some memory block in the free list.
 */
void Mem_free(void *return_ptr)
{  
    chunk_t *rptr;
    rptr=(chunk_t *)return_ptr;
    rptr--;
    if(Coalescing==FALSE)
    {
    rptr->next=Rover->next;
    Rover->next=rptr;
    }
    // obviously the next line is WRONG!!!!  You must fix it.
    //free(return_ptr);
}

/* returns a pointer to space for an object of size nbytes, or NULL if the
 * request cannot be satisfied.  The memory is uninitialized.
 *
 * This function assumes that there is a Rover pointer that points to
 * some item in the free list.  The first time the function is called,
 * Rover is null, and must be initialized with a dummy block whose size
 * is set to zero so this block can never be removed from the list.  After
 * the first call, the Rover can never be null again.
 */
void *Mem_alloc(int nbytes)
{
    chunk_t *p;
    chunk_t *q;
    chunk_t *prev=Rover;
    int nunits=nbytes/sizeof(chunk_t);
    nunits=nunits+1;
    if (Rover == NULL)
    {
        p=morecore(PAGESIZE);
        pagerequest++;
        sbrk_call ++;
           if(p == NULL)
          {
            return NULL;
          }
        q=p+1;
        p->size=0;
        q->size=(PAGESIZE)/sizeof(chunk_t)-1;
        p->next=q;
        q->next=p;
        printf("Size of Chunk_t %d",sizeof(chunk_t));
        Rover=p;
    }
    chunk_t *START = Rover;
    Rover=Rover->next; 
     
   if (SearchPolicy == FIRST_FIT)
    { 
     do{
        if (Rover->size > nunits)
        { 
	p=Rover+Rover->size-nunits;
        p->next=NULL;
        p->size=nunits;
        Rover->size-=nunits;
        return p+1;

        }
       else if (Rover->size == nunits)
       {
        p=Rover;
        prev->next=p->next;
        p->next=NULL;
        return p+1;
       }
       Rover = Rover -> next;
      } 
    while(Rover != START);
   }
    
   else if (SearchPolicy == BEST_FIT)
    {
       if (Rover->size == nunits)
        {
        p=Rover;
        prev->next=p->next;
        p->next=NULL;
        return p+1;
        }
       else if (Rover->size > nunits)
        {
         p = Rover;
         Rover=Rover->next;
            
             while(Rover != START)
             {
              if(Rover->size < p->size)
              {
               p= Rover;
               p->next=NULL;
               p->size=nunits;
               Rover->size=nunits;
               return p+1;
               Rover=Rover->next;
              }
              else
              {
              Rover=Rover->next;
              }    
             }
            }
           
         }
        return p;
   }
   
   
    // as an example assume one page is enough
   // int num_pages = 1;

    // Here is an example of a call to morecore
   // int new_bytes = PAGESIZE * num_pages;           /* num_pages is an int */
   // p = morecore(new_bytes);
   // p->next = NULL;
   // p->size = new_bytes / sizeof(chunk_t);       /* num header-sized units */
    //q = p + 1;                     /* move to one unit past start of block */
    //Mem_free( q );                         /* add new segment to free list */
   // printf("p=%d, size=%d, end=%d, next=%d",p, p->size, p + p->size, p->next);

    // obviously the next line is WRONG!!!!  You must fix it. 
    
   // return malloc(nbytes);


/* prints stats about the current free list
 *
 * number of chunks on list
 * min, max, and average size of each chunk in bytes
 * total memory in list in bytes
 * number of calls to sbrk and number of pages requested
 */
void Mem_stats(void)
{ 
    chunk_t *START = Rover;
    
    if (START == NULL)
    { 
       return;
    }
    int num_chunks = 0,total_mem= 0;
    
    float min,max,avg;
    
    Rover = START->next;
    
    min = Rover->size;
    max = Rover->size;
    avg = Rover->size;
    
    while(Rover != START) 
    {
        num_chunks++;
        total_mem /*+*/=total_mem + Rover->size;
        
        if(Rover->size < min) 
        {
        min = Rover->size;
        }
        
        if(Rover->size > max) 
        {
        max = Rover->size;
        }
        avg = (avg*(num_chunks-1) + Rover->size)/num_chunks;
        Rover=Rover->next;
    }
    
    min = min * sizeof(chunk_t);
    max = max * sizeof(chunk_t);
    avg = avg * sizeof(chunk_t);
    total_mem = total_mem * sizeof(chunk_t);
   
    printf("\n Toatal number of Chunks in free list: %d", num_chunks);
    printf("\nMin Size: %0.2f Max Size: %0.2f Average Size: %0.3f",min,max,avg);
    printf("\nTotal Memory in list: %d",total_mem);
    printf("\nCalls to sbrk: %d, Pages Requested: %d\n",sbrk_call,pagerequest);
}


/*{   
    printf("the student must implement mem stats\n");
}*/

/* print table of memory in free list 
 * example format
 *     chunk_t *p;
 *     printf("p=0x%p, size=%d, end=0x%p, next=0x%p\n", 
 *              p, p->size, p + p->size, p->next);
 */
void Mem_print(void)
{
 
    chunk_t *p =Rover; 
    chunk_t *start =Rover; 
    do
    {
     printf("p=%p, size=%d, end=%p, next=%p\n", p, p->size, p + p->size, p->next);
     p=p->next;
    }
   while(p != start);
   
}
/* vi:set ts=8 sts=4 sw=4 et: */

