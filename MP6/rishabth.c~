//Rishabh Agarwal
// MP6


#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "rishab.h"
#define unreachable 876543



void construct(home *node_ptr,int graphchoice,int V,int rover_ptr)
 {
	int incr = 0;
	node_ptr->graph_matrx = (double **)malloc (V * sizeof (double*));
	rover_ptr=0;
	node_ptr->graphchoice = graphchoice;
	node_ptr->V = V;
	node_ptr->path= (int *)malloc(V * sizeof(int));
	node_ptr->node_length = (double *)malloc (V * sizeof (double));
	if(rover_ptr==0)
	{
	while (incr<V)
	{
		
		node_ptr->graph_matrx[incr]=(double *)malloc (V * sizeof(double));
		incr++;
	}
	}
	
 }

void destruct (home *node_ptr)
{
int incr=0;
 while (incr < node_ptr->V)
   {
   free(node_ptr->graph_matrx[incr]);
   incr++;
   }
free(node_ptr->graph_matrx);
free(node_ptr->path);
free(node_ptr->node_length);
}


void dijkstras_graph(home*node_ptr, int graphchoice , int V, int approx_vertices, int rover_ptr)
{
	int incr=0;
	int incr2=0;
	
	node_ptr->graphchoice=graphchoice;
	if(graphchoice == 1)
	{
	      while (incr<V)
	      {
		    while (incr<V)
	      {
		   incr2=0
		   do
		    {
		    	node_ptr->graph_matrx[incr][incr2]= unreachable;
 	          if(incr==incr2)
		 	  {
		 		node_ptr->graph_matrx[incr][incr2]=0;
		 	  }
		    incr2++;
		    }while(incr2<V);
		    
		    incr++;
	      }
		    incr++;
	      }	
	      node_ptr->graph_matrx[1][6]=5;
	      node_ptr->graph_matrx[2][3]=7;
	      node_ptr->graph_matrx[2][4]=3;
	      node_ptr->graph_matrx[2][6]=10;
	      node_ptr->graph_matrx[3][4]=5;
	      node_ptr->graph_matrx[6][0]=4;
	      node_ptr->graph_matrx[6][3]=8;
	      node_ptr->graph_matrx[6][4]=9;
	      node_ptr->graph_matrx[3][5]=1;
	      node_ptr->graph_matrx[4][5]=6;
	      node_ptr->graph_matrx[5][6]=7;
	      node_ptr->graph_matrx[1][2]=3;
	 }
	 
    if(graphchoice==2)
	{
	    incr=0;
    	 while(incr<V)
    	 {
    	 incr2=0;
    	  do
    	  {
	   node_ptr->graph_matrx[incr][incr2]= abs((incr-incr2)) + pow(((incr-incr2) + 3),2) + 5*incr2;
    	   if(incr!=incr2)
         { incr2++;
          }
          else
          {node_ptr->graph_matrx[incr][incr2]=0;
          incr2++;
          }
          }while(incr2<V);
          incr++;
        }  
    
   }
   
 if(graphchoice==3)
{
 int pie=3.14;
 int incr,incr2,min=unreachable,max=0,ptr;
 double d,total,mean;
  vertex array[V];
  array[0].vertex1=0;
  array[0].vertex2=0.5;
  
  array[V-1].vertex1=1;
  array[V-1].vertex2=0.5;
    for(incr=1;incr<V-1;incr++) 
	      {
	      array[incr].vertex1=drand48();
	      array[incr].vertex2=drand48();
	      }
 double c,m,f;
c= sqrt ((approx_vertices/(V*pie)));
 m= log10(1+ pow((1/c),2));
incr=0;
while(incr<V)
{
 for(incr2=0;incr2<V;incr2++)
 {
   d = sqrt((pow((array[incr].vertex1 - array[incr2].vertex1),2)) + (pow((array[incr].vertex2 - array[incr2].vertex2),2))); 
  
   if(d<=c) 
  {
  f= log10(1+(pow(1/(d+(c/1000)),2)));
  node_ptr->graph_matrx[incr][incr2]=m/f;
  total++;
  ptr++;
  }
  else if(incr==incr2)
  node_ptr->graph_matrx[incr][incr2]=0;
 
  else
  node_ptr->graph_matrx[incr][incr2]=unreachable;
  
  }
  
 if (ptr>min) 
    {
         max=ptr;
    }
  else if(ptr<min)
    {
        min=ptr;
    }
	         
  incr++;
 }
    printf("Maximum adjacent vertices:%d\n",max);
	printf("Minimum adjacent vertices: %d\n",min);
	mean=total/V; 
	printf("Mean of adjacent vertices: %g\n",mean); 
 }
 else 
 return ;
}


void short_path(home *node_ptr,int s_v, int rover_ptr)
{

{ 
    if(s_v > node_ptr->V)
{
return;
}

 int V;
 V=node_ptr->V;
 int v[V],incr,incr2,min;
 
 incr=V-1; 
 while (incr>=0)
 {
  node_ptr->node_length[incr]=unreachable;
  v[incr]=0;
  node_ptr->path[incr] = 0;
  incr--;
 }

 node_ptr->node_length[s_v]=0;
 node_ptr->path[s_v] = -2*unreachable; 
 
 for(incr2=0;incr2<V;incr2++)
 {
  
  min=-2;
  for(incr=0;incr<V;incr++)
   {
    if(v[incr]==0)
    {
    if(min==-2 ||( node_ptr->node_length[incr] < node_ptr->node_length[min]))
     {
      min=incr;
     }
    }
   }
   v[min]=1;
   incr=0;
   while(incr<V)
    { 
     if(node_ptr->graph_matrx[min][incr]!=0 || node_ptr->graph_matrx[min][incr] !=unreachable )
     {
      
      if(node_ptr->node_length[incr] > node_ptr->graph_matrx[min][incr]+node_ptr->node_length[min])
      {
      node_ptr->node_length[incr] = node_ptr->graph_matrx[min][incr] +node_ptr->node_length[min] ;
      node_ptr->path[incr] = min;
      }
    }
    incr++;
   }   
 }
}   
}			 
	     
void longest_path(home *node_ptr,int V,int rover_ptr)
{
int incr2;
int shad=1,length=0;
int sv=0,dv=0;
int count=0;

while(count < V)
{
 short_path(node_ptr,count,0);
 for(incr2=0;incr2<V;incr2++)
 {
  if((node_ptr->node_length[incr2] > length) && node_ptr->node_length[incr2]!=unreachable)
  {
    sv=count; 
    length=node_ptr->node_length[incr2];
    dv=incr2;
    }
    else if(node_ptr->node_length[incr2]==unreachable)
    {
    shad=2;
    }
   }
   
  count+=1; 
}

 short_path(node_ptr,sv,0);
 printf("\ndiameter %g  path :",node_ptr->node_length[dv]);
 
 void graph_display_full(home *node_ptr,int d,int rover_ptr);
 
 printf("\n");
 
 if(shad==2)
 printf("Graph is not connected");
 else
 printf("Graph is connected");
}

void graph_display(home *node_ptr,int V,int rover_ptr)

{
	int incr=0,incr2=0;
	
	while(incr<V)
	{
		while(incr2<V)
		{
			printf("%g\t ",node_ptr->graph_matrx[incr][incr2]);
			incr2++;
		}
		incr++;
	printf("\n");
	}
}

void graph_display_full(home *node_ptr,int destination,int rover_ptr)
{

int incr;
int path[node_ptr->V];
int flag=0;
	
	int random=destination;
	
	while(random!= (-2*unreachable))
	     {
	     path[flag]=random;
	     random= node_ptr->path[random];
	     flag++;
	     }
 	for(incr=flag-1;incr>=0;incr--)
 	  {
 	   printf("%d",path[incr]);
 	   if(incr!=0)
 	   {
 	    printf("--");
 	   }
 	  }	

}
